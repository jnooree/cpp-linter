Command Line Interface Options
==============================

.. note::

    These options have a direct relationship with the
    `cpp-linter-action user inputs <https://cpp-linter.github.io/cpp-linter-action/inputs-outputs#inputs>`_. Although, some default values may differ.


.. std:option:: -v, --verbosity

    :badge-version:`1.4.6` :badge-default:`'info'` 

    This controls the action's verbosity in the workflow's
    logs. Supported options are ``debug`` and ``info``.
    The numerical representations of these log levels
    defined by the `logging <logging-levels>`_ library
    (``10`` for ``debug``, and ``20`` for ``info``) are
    also supported.
    
    This option does not affect the verbosity of resulting
    thread comments, file annotations, nor log grouping
    markers.
    

.. std:option:: -p, --database

    :badge-version:`1.4.6` :badge-default:`''` 

    The path that is used to read a compile command
    database. For example, it can be a CMake build
    directory in which a file named compile_commands.json
    exists (set ``CMAKE_EXPORT_COMPILE_COMMANDS`` to
    ``ON``). When no build path is specified, a search
    for compile_commands.json will be attempted through
    all parent paths of the first input file. See
    https://clang.llvm.org/docs/HowToSetupToolingForLLVM.html
    for an example of setting up Clang Tooling on a source
    tree.
    
    .. important::
        Builds using ninja should explicitly specify this
        path. Otherwise, cpp-linter will have difficulty
        parsing clang-tidy output

.. std:option:: -s, --style

    :badge-version:`1.4.6` :badge-default:`'llvm'` 

    The style rules to use.
    
    - Set this to ``file`` to have clang-format use the
      closest relative .clang-format file.
    - Set this to a blank string (``""``) to disable
      using clang-format entirely.
    
    See `clang-format docs <https://clang.llvm.org/docs/ClangFormat.html>`_ for more info.
    

.. std:option:: -c, --tidy-checks

    :badge-version:`1.4.6` :badge-default:`'boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-*,cppcoreguidelines-*'` 

    A comma-separated list of globs with optional
    ``-`` prefix. Globs are processed in order of
    appearance in the list. Globs without ``-`` prefix
    add checks with matching names to the set, globs with
    the ``-`` prefix remove checks with matching names
    from the set of enabled checks. This option's value
    is appended to the value of the 'Checks' option in
    a .clang-tidy file (if any).
    
    - It is possible to disable clang-tidy entirely by
      setting this option to ``'-*'``.
    - It is also possible to rely solely on a .clang-tidy
      config file by specifying this option as a blank
      string (``''``).
    
    See also `clang-tidy docs <https://clang.llvm.org/extra/clang-tidy>`_ for more info.
    

.. std:option:: -V, --version

    :badge-version:`1.4.6` :badge-default:`''` 

    The desired version of the clang tools to use.
    
    - Set this option to a blank string (``''``) to use
      the platform's default installed version.
    - This value can also be a path to where the clang
      tools are installed (if using a custom install
      location). All paths specified here are converted
      to absolute.
    

.. std:option:: -e, --extensions

    :badge-version:`1.4.6` :badge-default:`'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx'` 

    The file extensions to analyze.
    This is a comma-separated string of extensions.

.. std:option:: -r, --repo-root

    :badge-version:`1.4.6` :badge-default:`'.'` 

    The relative path to the repository root directory.
    This path is relative to the working directory from
    which cpp-linter was executed.

.. std:option:: -i, --ignore

    :badge-version:`1.4.6` :badge-default:`'.github'` 

    Set this option with path(s) to ignore (or not ignore).
    
    - In the case of multiple paths, you can use ``|`` to
      separate each path.
    - There is no need to use ``./`` for each entry; a
      blank string (``''``) represents the repo-root
      path.
    - This can also have files, but the file's path
      (relative to the :std:option:`--repo-root`) has to
      be specified with the filename.
    - Submodules are automatically ignored. Hidden
      directories (beginning with a ``.``) are also
      ignored automatically.
    - Prefix a path with ``!`` to explicitly not ignore
      it. This can be applied to a submodule's path (if
      desired) but not hidden directories.
    - Glob patterns are not supported here. All asterisk
      characters (``*``) are literal

.. std:option:: -l, --lines-changed-only

    :badge-version:`1.4.6` :badge-default:`'false'` :badge-permission:`file-changes contents: read`

    This controls what part of the files are analyzed.
    The following values are accepted:
    
    - ``false``: All lines in a file are analyzed.
    - ``true``: Only lines in the diff that contain
      additions are analyzed.
    - ``diff``: All lines in the diff are analyzed
      including unchanged lines but not subtractions.
    

.. std:option:: -f, --files-changed-only

    :badge-version:`1.4.6` :badge-default:`'false'` :badge-permission:`file-changes contents: read`

    Set this option to false to analyze any source
    files in the repo. This is automatically enabled if
    :std:option:`--lines-changed-only` is enabled.
    
    .. note::
        The ``GITHUB_TOKEN`` should be supplied when
        running on a private repository with this option
        enabled, otherwise the runner does not not have
        the privilege to list the changed files for an
        event.
    
        See `Authenticating with the GITHUB_TOKEN
        <https://docs.github.com/en/actions/reference/authentication-in-a-workflow>`_
    

.. std:option:: -g, --no-lgtm

    :badge-version:`1.6.1` :badge-default:`'true'` 

    Set this option to true or false to enable or
    disable the use of a thread comment or PR review
    that basically says 'Looks Good To Me' (when all
    checks pass).
    
    .. seealso::
        The :std:option:`--thread-comments` option also
        notes further implications.
    

.. std:option:: -t, --thread-comments

    :badge-version:`1.6.1` :badge-default:`'false'` :badge-permission:`thread-comments issues: write`

    This controls the behavior of posted thread
    comments as feedback.
    The following options are supported:
    
    - ``true``: enable the use of thread comments.
      This will always delete an outdated thread
      comment and post a new comment (triggering
      a notification for every comment).
    - ``update``: update an existing thread comment
      if one already exists. This option does not
      trigger a new notification for every thread
      comment update.
    - ``false``: disable the use of thread comments.
    
    .. note::
        To use thread comments, the ``GITHUB_TOKEN``
        (provided by Github to each repository) must
        be declared as an environment variable.
    
        See `Authenticating with the GITHUB_TOKEN
        <https://docs.github.com/en/actions/reference/authentication-in-a-workflow>`_
    

.. std:option:: -w, --step-summary

    :badge-version:`1.6.0` :badge-default:`'false'` 

    Set this option to true or false to enable or
    disable the use of a workflow step summary when the run
    has concluded.
    

.. std:option:: -a, --file-annotations

    :badge-version:`1.4.6` :badge-default:`'true'` 

    Set this option to false to disable the use of
    file annotations as feedback.
    

.. std:option:: -x, --extra-arg

    :badge-version:`1.4.7` :badge-default:`''` 

    A string of extra arguments passed to clang-tidy
    for use as compiler arguments. This can be specified
    more than once for each additional argument. Recommend
    using quotes around the value and avoid using spaces
    between name and value (use ``=`` instead):
    
    .. code-block:: shell
    
        cpp-linter --extra-arg="-std=c++17" --extra-arg="-Wall"
    

.. std:option:: -d, --tidy-review

    :badge-version:`1.7.0` :badge-default:`'false'` :badge-permission:`pull-request-reviews pull_request: write`

    Set to ``true`` to enable Pull Request reviews
    from clang-tidy.
    

.. std:option:: -m, --format-review

    :badge-version:`1.7.0` :badge-default:`'false'` :badge-permission:`pull-request-reviews pull_request: write`

    Set to ``true`` to enable Pull Request reviews
    from clang-format.
    

.. std:option:: -j, --jobs

    :badge-version:`1.4.6` :badge-default:`'1'` 

    Set the number of jobs to run simultaneously.
    If set to <= 0, the number of jobs will be set to the
    number of all available CPU cores.
    
