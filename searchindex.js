Search.setIndex({"titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tools</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tools.clang_format</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">clang_tools.clang_tidy</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">common_fs</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">git</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">git.git_str</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">loggers</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rest_api</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">rest_api.github_api</span></code>", "How to build the docs", "Command Line Interface Options", "C/C++ Linting Package", "Token Permissions", "Pull Request Review Caveats"], "terms": {"run": [0, 1, 2, 3, 9, 11, 13], "clang": [0, 1, 2, 3, 4, 8, 9, 11, 12, 14], "tidi": [0, 1, 2, 3, 4, 8, 9, 11, 12, 13, 14], "format": [0, 1, 2, 4, 8, 9, 11, 12, 13, 14], "list": [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 13], "file": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14], "If": [0, 1, 3, 4, 8, 9, 11, 14], "execut": [0, 1, 11], "from": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 14], "command": [0, 1, 2, 3, 9, 12], "line": [0, 2, 3, 4, 5, 12, 13, 14], "main": [0, 4], "i": [0, 1, 3, 4, 5, 6, 8, 9, 11, 13, 14], "entrypoint": 0, "cpp_linter": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14], "script": [0, 12], "assemble_version_exec": 1, "tool_nam": 1, "str": [1, 2, 3, 4, 5, 6, 7, 8, 9], "specified_vers": 1, "none": [1, 2, 3, 4, 5, 7, 8, 9], "assembl": [1, 4], "given": [1, 4, 5, 6, 8, 14], "tool": [1, 4, 8, 9, 11, 14], "base": [1, 4, 9], "version": [1, 11], "inform": [1, 2, 3, 5, 6, 8, 9, 14], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9], "name": [1, 2, 4, 7, 9, 11, 14], "number": [1, 2, 3, 4, 5, 8, 9, 11], "instal": [1, 10, 11], "path": [1, 2, 3, 4, 5, 6, 8, 9, 11], "": [1, 2, 3, 4, 5, 7, 8, 9, 11, 14], "capture_clang_tools_output": 1, "fileobj": [1, 2, 3, 4, 5, 6, 8, 9], "check": [1, 3, 4, 8, 9, 11, 13], "style": [1, 2, 4, 8, 9, 11, 14], "lines_changed_onli": [1, 2, 3, 4, 5, 6, 8, 9], "int": [1, 2, 3, 4, 5, 6, 8, 9], "databas": [1, 3, 11], "extra_arg": [1, 3], "tidy_review": [1, 3, 8, 9], "bool": [1, 2, 3, 4, 8, 9], "format_review": [1, 2, 8, 9], "num_work": 1, "tupl": [1, 3, 4, 5, 8, 9], "formatadvic": [1, 2, 8, 9], "tidyadvic": [1, 3, 8, 9], "captur": 1, "all": [1, 4, 9, 11, 14], "output": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11], "thi": [1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 14], "aggreg": 1, "result": [1, 8, 9, 11], "A": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12], "analyz": [1, 4, 5, 11], "comma": [1, 3, 11], "separ": [1, 3, 11], "regul": [1, 3], "express": [1, 3], "describ": [1, 3, 5, 8, 9], "desir": [1, 3, 5, 11], "enabl": [1, 2, 3, 8, 9, 11, 14], "configur": [1, 2, 3, 14], "rule": [1, 2, 11], "adher": [1, 2], "set": [1, 2, 3, 5, 8, 9, 11, 14], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14], "rel": [1, 2, 11], "most": [1, 2, 9], "flag": [1, 2, 3, 4, 8, 9], "forc": [1, 2, 3], "focu": [1, 2, 3, 4, 5, 6, 8, 9], "onli": [1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14], "chang": [1, 2, 3, 4, 5, 6, 8, 9, 11, 14], "event": [1, 2, 3, 4, 5, 6, 8, 9, 11, 13], "diff": [1, 2, 3, 4, 5, 6, 8, 9, 11, 14], "info": [1, 2, 3, 5, 11], "compil": [1, 3, 11, 14], "extra": [1, 3, 11], "argument": [1, 3, 4, 11], "disabl": [1, 2, 3, 8, 9, 11], "creat": [1, 2, 3, 4, 8, 9], "suggest": [1, 2, 3, 8, 9, 14], "pr": [1, 2, 3, 4, 8, 9, 11, 14], "review": [1, 2, 3, 4, 8, 9, 11], "comment": [1, 2, 3, 4, 8, 9, 11, 12, 14], "worker": 1, "parallel": [1, 8, 9], "process": [1, 11], "cpu": [1, 11], "core": [1, 11], "pars": [2, 3, 5, 6, 9, 11], "xml": 2, "class": [2, 3, 4, 8, 9], "formatreplac": 2, "col": [2, 3], "null_len": 2, "text": 2, "an": [2, 4, 5, 6, 8, 9, 11, 13, 14], "object": [2, 3, 4, 5, 6, 7, 8, 9], "repres": [2, 3, 4, 5, 11], "singl": [2, 4], "replac": [2, 9], "column": [2, 3, 4], "where": [2, 3, 5, 11, 14], "start": [2, 4, 5], "byte": [2, 4], "remov": [2, 9, 11], "bytearrai": 2, "formatreplacementlin": 2, "line_numb": 2, "about": [2, 3, 5, 6, 14], "filenam": [2, 3, 4, 11], "each": [2, 5, 8, 9, 11], "which": [2, 4, 8, 11], "content": [2, 11, 13], "export": 2, "concern": [2, 3, 14], "replaced_lin": 2, "patch": [2, 4, 5, 14], "buffer": [2, 7], "appli": [2, 3, 4, 11, 14], "fix": [2, 3, 14], "parse_format_replacements_xml": 2, "xml_out": 2, "file_obj": [2, 3], "string": [2, 11], "contain": [2, 3, 4, 5, 6, 11, 14], "wa": [2, 3, 6, 8, 9, 11], "run_clang_format": 2, "certain": [2, 3, 4], "usual": [2, 3], "resolv": [2, 3, 14], "stdout": 3, "tidynotif": 3, "notification_lin": 3, "dict": [3, 4, 5, 8, 9], "decod": 3, "initi": 3, "detail": 3, "specif": [3, 9, 14], "notif": [3, 11], "first": [3, 9, 11], "differ": [3, 9, 11, 14], "compon": 3, "deseri": 3, "json": [3, 4, 11], "point": 3, "valid": 3, "compile_command": [3, 11], "diagnost": [3, 14], "trigger": [3, 9, 11, 14], "rational": 3, "sever": 3, "prioriti": 3, "level": [3, 11], "warn": [3, 7, 14], "error": [3, 14], "fixit_lin": 3, "code": [3, 8, 9, 12, 14], "block": [3, 14], "applied_fix": 3, "properti": [3, 4], "diagnostic_link": 3, "markdown": [3, 8], "link": 3, "document": [3, 12, 14], "run_clang_tidi": 3, "db_json": 3, "1": [3, 4, 5, 11, 13, 14], "item": [3, 5, 8], "long": 3, "space": [3, 11], "reform": 3, "split": 3, "whitespac": 3, "charact": [3, 11], "cpp": [3, 4, 7, 11, 12, 13], "linter": [3, 7, 11, 12, 13], "arg": [3, 11], "std": [3, 11], "c": [3, 6, 11], "14": 3, "wall": [3, 11], "equival": 3, "parse_tidy_output": 3, "tidy_out": 3, "cache_path": 4, "posixpath": 4, "linter_cach": 4, "gener": [4, 14], "cach": 4, "artifact": 4, "when": [4, 6, 8, 9, 11, 13, 14], "verbos": [4, 11], "debug": [4, 9, 11], "mode": 4, "addit": [4, 5, 11], "diff_chunk": 4, "being": [4, 9], "should": [4, 8, 9, 11], "unix": 4, "delimit": 4, "even": 4, "window": 4, "have": [4, 11, 14], "ad": 4, "valu": [4, 5, 6, 8, 9, 11], "popul": 4, "lines_ad": 4, "rang": [4, 5], "defin": [4, 11], "begin": [4, 7, 11], "end": [4, 5, 7], "hunk": [4, 5], "empti": 4, "focus": 4, "range_of_changed_lin": 4, "get_rang": 4, "fals": [4, 8, 9, 11], "indic": [4, 8, 9, 14], "0": [4, 5, 11], "ani": [4, 6, 8, 9, 11, 14], "shown": [4, 14], "mai": [4, 10, 11, 14], "includ": [4, 11, 14], "unchang": [4, 11], "2": [4, 5, 13], "strictli": 4, "return": [4, 5, 6, 8, 9], "sequenc": [4, 9], "default": [4, 5, 8, 9, 11, 14], "sinc": 4, "requir": [4, 10, 13], "construct": 4, "cli": [4, 5, 12], "give": 4, "attent": 4, "assert": 4, "serial": 4, "For": [4, 11, 12], "easi": 4, "method": [4, 8, 9], "compat": 4, "is_hunk_contain": 4, "diffhunk": [4, 5], "doe": [4, 11, 14], "within": [4, 14], "also": [4, 5, 8, 11, 13, 14], "some": [4, 5, 11, 14], "compens": 4, "header": [4, 8, 9], "ar": [4, 5, 9, 11, 12, 13, 14], "oddli": 4, "form": [4, 12], "mostli": 4, "can": [4, 8, 9, 11, 14], "post": [4, 8, 9, 11, 12], "git": 4, "ideal": 4, "design": [4, 9], "appropri": 4, "cannot": [4, 14], "fit": [4, 14], "is_range_contain": 4, "helper": [4, 8, 9], "function": [4, 5, 6, 8, 9], "is_file_in_list": 4, "file_nam": 4, "prompt": 4, "determin": [4, 9], "specifi": [4, 5, 11], "compar": 4, "must": [4, 11], "part": [4, 11], "sought": 4, "found": [4, 9], "true": [4, 8, 9, 11, 14], "has_line_chang": 4, "actual": 4, "condit": 4, "mean": [4, 8, 9], "we": [4, 5, 14], "don": 4, "t": [4, 11, 14], "care": 4, "whole": 4, "chunk": 4, "subtract": [4, 11], "is_source_or_ignor": 4, "ext_list": 4, "ignor": [4, 5, 6, 8, 9, 11], "not_ignor": [4, 5, 6, 8, 9], "exclud": 4, "undesir": 4, "user": [4, 9, 11, 14], "input": [4, 11], "extens": [4, 5, 6, 8, 9, 11], "filter": [4, 14], "attribut": 4, "question": 4, "examin": 4, "explicitli": [4, 5, 6, 8, 9, 11], "invok": [4, 9], "earli": 4, "exit": 4, "list_source_fil": 4, "make": [4, 8, 9], "attend": 4, "get_line_cnt_from_col": 4, "file_path": 4, "offset": 4, "get": [4, 5, 8, 9, 13], "count": [4, 8], "absolut": [4, 11], "translat": 4, "index": [4, 5], "modul": [5, 9], "commit": [5, 9, 14], "It": [5, 11], "hold": [5, 9], "relat": 5, "get_sha": 5, "repo": [5, 9, 11], "repositori": [5, 9, 10, 11, 12, 13, 14], "parent": [5, 11], "fetch": [5, 8, 9], "full": [5, 14], "sha": [5, 9], "hash": 5, "current": [5, 14], "local": 5, "develop": 5, "environ": [5, 11, 14], "continu": [5, 14], "integr": [5, 14], "workflow": [5, 9, 11, 12, 14], "last": 5, "tree": [5, 11], "head": [5, 9], "instead": [5, 9, 10, 11], "get_diff": 5, "retriev": 5, "parse_diff": [5, 6], "diff_obj": 5, "complet": [5, 6], "dictat": [5, 6, 8, 9], "what": [5, 6, 8, 9, 11, 14], "delet": [5, 8, 9, 11], "omit": 5, "becaus": [5, 14], "want": 5, "updat": [5, 9, 11], "parse_patch": 5, "accordingli": 5, "element": 5, "reintroduc": 6, "deal": 6, "bug": [6, 12], "pygit2": 6, "libgit2": 6, "librari": [6, 11], "bind": 6, "here": [6, 11], "fail": [6, 7, 8, 9], "full_diff": 6, "instanc": 6, "log": [7, 8, 9, 11, 14], "data": [7, 8, 9], "start_log_group": 7, "collaps": [7, 14], "group": [7, 11], "statement": 7, "end_log_group": 7, "log_response_msg": 7, "respons": [7, 8, 9], "messag": 7, "request": [7, 8, 9, 11, 12], "restapicli": 8, "api_request": [8, 9], "url": [8, 9], "strict": [8, 9], "streamlin": [8, 9], "handl": [8, 9], "http": [8, 9, 11], "els": [8, 9], "payload": [8, 9], "overrid": [8, 9], "httperror": [8, 9], "rais": [8, 9], "respond": [8, 9], "statu": [8, 9], "greater": [8, 9], "than": [8, 9, 11], "equal": [8, 9], "400": [8, 9], "set_exit_cod": [8, 9], "checks_fail": [8, 9], "format_checks_fail": [8, 9], "tidy_checks_fail": [8, 9], "action": [8, 9, 11, 12, 14], "show": [8, 9, 14], "them": [8, 9], "total": [8, 9], "pass": [8, 9, 11, 14], "make_head": [8, 9], "use_diff": [8, 9], "rest": [8, 9, 14], "api": [8, 9, 14], "syntax": [8, 9], "call": [8, 9], "get_list_of_changed_fil": [8, 9], "static": [8, 9], "make_com": 8, "format_advic": [8, 9], "tidy_advic": [8, 9], "advic": [8, 9], "correspond": 8, "talli": 8, "post_feedback": [8, 9], "thread_com": [8, 9], "no_lgtm": [8, 9], "step_summari": [8, 9], "file_annot": [8, 9], "how": [8, 9, 14], "thread": [8, 9, 11, 12, 14], "see": [8, 9, 10, 11, 12, 14], "control": [8, 9, 11], "look": [8, 9, 11], "good": [8, 9, 11], "To": [8, 9, 11, 12, 14], "me": [8, 9, 11], "outdat": [8, 9, 11, 14], "bot": [8, 9], "still": [8, 9, 14], "lgtm": [8, 9, 11], "step": [8, 9, 10, 11], "summari": [8, 9, 11, 14], "annot": [8, 9, 11, 12], "github": [9, 11, 14], "interact": [9, 14], "around": [9, 11], "refer": [9, 14], "pull": [9, 11], "issu": [9, 11, 12, 13], "githubapicli": 9, "api_url": 9, "domain": 9, "owner": 9, "event_nam": 9, "type": 9, "debug_en": 9, "event_payload": 9, "deliv": 9, "web": 9, "hook": 9, "verify_files_are_pres": 9, "download": [9, 13], "present": 9, "exist": [9, 11], "assum": 9, "work": [9, 11], "directori": [9, 10, 11], "root": [9, 10, 11], "thei": 9, "bad": 9, "same": [9, 14], "folder": 9, "make_annot": 9, "chosen": 9, "guidelin": 9, "custom": [9, 11], "update_com": 9, "comments_url": 9, "update_onli": 9, "is_lgtm": 9, "new": [9, 11], "essenti": 9, "remove_bot_com": 9, "travers": 9, "made": [9, 14], "applic": 9, "create_review_com": 9, "tool_advic": 9, "summary_onli": 9, "batch": 9, "has_more_pag": 9, "previou": 9, "pagin": 9, "next": 9, "page": 9, "otherwis": [9, 11], "do": [10, 14], "follow": [10, 11, 13], "depend": [10, 14], "pip": 10, "r": [10, 11], "txt": 10, "On": 10, "linux": 10, "you": [10, 11], "need": [10, 11, 13, 14], "pip3": 10, "sphinx": 10, "_build": 10, "html": [10, 11], "brows": 10, "your": 10, "internet": 10, "browser": 10, "render": 10, "These": 11, "direct": 11, "relationship": 11, "although": 11, "v": 11, "4": 11, "6": 11, "support": [11, 12, 14], "numer": 11, "represent": 11, "10": 11, "20": 11, "affect": 11, "nor": 11, "marker": 11, "p": 11, "read": [11, 13], "exampl": 11, "cmake": 11, "build": 11, "cmake_export_compile_command": 11, "ON": 11, "search": 11, "attempt": 11, "through": 11, "llvm": 11, "org": 11, "doc": 11, "howtosetuptoolingforllvm": 11, "up": 11, "ninja": 11, "difficulti": 11, "closest": 11, "blank": 11, "entir": 11, "more": [11, 14], "boost": 11, "bugpron": 11, "perform": 11, "readabl": 11, "portabl": 11, "modern": 11, "cppcoreguidelin": 11, "glob": 11, "prefix": 11, "order": 11, "appear": 11, "without": 11, "add": 11, "match": 11, "append": 11, "possibl": 11, "reli": 11, "sole": 11, "config": 11, "platform": 11, "locat": 11, "convert": 11, "e": 11, "h": 11, "hpp": 11, "cc": 11, "hh": 11, "cxx": 11, "hxx": 11, "In": 11, "case": [11, 14], "multipl": 11, "There": [11, 14], "entri": 11, "ha": [11, 14], "submodul": 11, "automat": [11, 14], "hidden": [11, 14], "pattern": 11, "asterisk": 11, "liter": 11, "l": 11, "accept": [11, 14], "f": 11, "github_token": [11, 14], "suppli": 11, "privat": 11, "runner": 11, "privileg": 11, "authent": 11, "g": 11, "basic": 11, "sai": 11, "further": 11, "implic": 11, "write": [11, 13], "behavior": 11, "feedback": 11, "alwai": [11, 14], "everi": [11, 14], "one": 11, "alreadi": 11, "provid": [11, 12, 14], "declar": 11, "variabl": [11, 14], "w": 11, "conclud": 11, "x": 11, "7": 11, "onc": 11, "recommend": 11, "quot": 11, "avoid": [11, 14], "between": 11, "17": 11, "d": 11, "pull_request": [11, 13], "m": 11, "j": 11, "job": 11, "simultan": 11, "avail": 11, "python": 12, "collect": 12, "ci": [12, 13], "descript": 12, "interfac": 12, "option": 12, "featur": [12, 13, 14], "report": [12, 14], "pleas": [12, 14], "project": 12, "releas": 12, "under": 12, "mit": 12, "exhaust": 13, "organ": [13, 14], "out": [13, 14], "befor": 13, "both": [13, 14], "push": [13, 14], "often": 14, "abbrevi": 14, "while": 14, "been": 14, "dilig": 14, "test": 14, "bewar": 14, "allow": 14, "approv": 14, "By": 14, "token": 14, "isn": 14, "proper": 14, "adjust": 14, "secret": 14, "our": 14, "close": 14, "mark": 14, "draft": 14, "encourag": 14, "choos": 14, "either": 14, "like": 14, "duplic": 14, "similar": 14, "rememb": 14, "implement": 14, "combin": 14, "kind": 14, "anywai": 14, "dismiss": 14, "reduc": 14, "nois": 14, "hide": 14, "convers": 14, "wai": 14, "cpp_linter_pr_review_summary_onli": 14, "did": 14, "mani": 14, "were": 14, "left": 14, "problem": 14, "won": 14, "target": 14, "summat": 14, "help": 14, "u": 14, "keep": 14, "limit": 14, "howev": 14, "analysi": 14, "Not": 14, "decis": 14, "properli": 14, "address": 14, "might": 14, "so": 14, "take": 14, "advantag": 14, "prevent": 14}, "objects": {"": [[0, 0, 0, 1, "cpp_linter", ""], [11, 8, 1, "cmdoption-p", "--database", ""], [11, 8, 1, "cmdoption-e", "--extensions", ""], [11, 8, 1, "cmdoption-x", "--extra-arg", ""], [11, 8, 1, "cmdoption-a", "--file-annotations", ""], [11, 8, 1, "cmdoption-f", "--files-changed-only", ""], [11, 8, 1, "cmdoption-m", "--format-review", ""], [11, 8, 1, "cmdoption-i", "--ignore", ""], [11, 8, 1, "cmdoption-j", "--jobs", ""], [11, 8, 1, "cmdoption-l", "--lines-changed-only", ""], [11, 8, 1, "cmdoption-g", "--no-lgtm", ""], [11, 8, 1, "cmdoption-r", "--repo-root", ""], [11, 8, 1, "cmdoption-w", "--step-summary", ""], [11, 8, 1, "cmdoption-s", "--style", ""], [11, 8, 1, "cmdoption-t", "--thread-comments", ""], [11, 8, 1, "cmdoption-c", "--tidy-checks", ""], [11, 8, 1, "cmdoption-d", "--tidy-review", ""], [11, 8, 1, "cmdoption-v", "--verbosity", ""], [11, 8, 1, "cmdoption-V", "--version", ""], [11, 8, 1, "cmdoption-V", "-V", ""], [11, 8, 1, "cmdoption-a", "-a", ""], [11, 8, 1, "cmdoption-c", "-c", ""], [11, 8, 1, "cmdoption-d", "-d", ""], [11, 8, 1, "cmdoption-e", "-e", ""], [11, 8, 1, "cmdoption-f", "-f", ""], [11, 8, 1, "cmdoption-g", "-g", ""], [11, 8, 1, "cmdoption-i", "-i", ""], [11, 8, 1, "cmdoption-j", "-j", ""], [11, 8, 1, "cmdoption-l", "-l", ""], [11, 8, 1, "cmdoption-m", "-m", ""], [11, 8, 1, "cmdoption-p", "-p", ""], [11, 8, 1, "cmdoption-r", "-r", ""], [11, 8, 1, "cmdoption-s", "-s", ""], [11, 8, 1, "cmdoption-t", "-t", ""], [11, 8, 1, "cmdoption-v", "-v", ""], [11, 8, 1, "cmdoption-w", "-w", ""], [11, 8, 1, "cmdoption-x", "-x", ""]], "cpp_linter": [[1, 0, 0, 1, "clang_tools", ""], [4, 0, 0, 1, "common_fs", ""], [5, 0, 0, 1, "git", ""], [7, 0, 0, 1, "loggers", ""], [0, 1, 1, 0, "main", "The main script."], [8, 0, 0, 1, "rest_api", ""]], "cpp_linter.clang_tools": [[1, 1, 1, 0, "assemble_version_exec", "Assembles the command to the executable of the given clang tool based on given version information."], [1, 1, 1, 0, "capture_clang_tools_output", "Execute and capture all output from clang-tidy and clang-format. This aggregates results in the OUTPUT."], [2, 0, 0, 1, "clang_format", ""], [3, 0, 0, 1, "clang_tidy", ""]], "cpp_linter.clang_tools.assemble_version_exec": [[1, 2, 2, 0, "specified_version", "The version number or the installed path to a version of the tool's executable."], [1, 2, 2, 0, "tool_name", "The name of the clang tool to be executed."]], "cpp_linter.clang_tools.capture_clang_tools_output": [[1, 2, 2, 0, "checks", "The str of comma-separated regulate expressions that describe the desired clang-tidy checks to be enabled/configured."], [1, 2, 2, 0, "database", "The path to the compilation database."], [1, 2, 2, 0, "extra_args", "A list of extra arguments used by clang-tidy as compiler arguments."], [1, 2, 2, 0, "files", "A list of files to analyze."], [1, 2, 2, 0, "format_review", "A flag to enable/disable creating a diff suggestion for PR review comments using clang-format."], [1, 2, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [1, 2, 2, 0, "num_workers", "The number of workers to use for parallel processing. If None, then the number of workers is set to the number of CPU cores."], [1, 2, 2, 0, "style", "The clang-format style rules to adhere. Set this to 'file' to use the relative-most .clang-format configuration file."], [1, 2, 2, 0, "tidy_review", "A flag to enable/disable creating a diff suggestion for PR review comments using clang-tidy."], [1, 2, 2, 0, "version", "The version of clang-tidy to run."]], "cpp_linter.clang_tools.clang_format": [[2, 3, 1, 0, "FormatAdvice", "A single object to represent each suggestion."], [2, 3, 1, 0, "FormatReplacement", "An object representing a single replacement."], [2, 3, 1, 0, "FormatReplacementLine", "An object that represents a replacement(s) for a single line."], [2, 1, 1, 0, "parse_format_replacements_xml", "Parse XML output of replacements from clang-format."], [2, 1, 1, 0, "run_clang_format", "Run clang-format on a certain file"]], "cpp_linter.clang_tools.clang_format.FormatAdvice.__init__": [[2, 2, 2, 0, "filename", "The source file's name for which the contents of the xml file exported by clang-tidy."]], "cpp_linter.clang_tools.clang_format.FormatAdvice": [[2, 4, 1, 0, "filename", "The source file that the suggestion concerns."], [2, 4, 1, 0, "patched", "A buffer of the applied fixes from clang-format"], [2, 4, 1, 0, "replaced_lines", "A list of FormatReplacementLine representing replacement(s) on a single line."]], "cpp_linter.clang_tools.clang_format.FormatReplacement.__init__": [[2, 2, 2, 0, "cols", "The columns number of where the suggestion starts on the line"], [2, 2, 2, 0, "null_len", "The number of bytes removed by suggestion"], [2, 2, 2, 0, "text", "The bytearray of the suggestion"]], "cpp_linter.clang_tools.clang_format.FormatReplacement": [[2, 4, 1, 0, "cols", "The columns number of where the suggestion starts on the line"], [2, 4, 1, 0, "null_len", "The number of bytes removed by suggestion"], [2, 4, 1, 0, "text", "The bytearray of the suggestion"]], "cpp_linter.clang_tools.clang_format.FormatReplacementLine.__init__": [[2, 2, 2, 0, "line_numb", "The line number of about the replacements"]], "cpp_linter.clang_tools.clang_format.FormatReplacementLine": [[2, 4, 1, 0, "line", "The line number of where the suggestion starts"], [2, 4, 1, 0, "replacements", "A list of FormatReplacement object(s) representing suggestions."]], "cpp_linter.clang_tools.clang_format.parse_format_replacements_xml": [[2, 2, 2, 0, "file_obj", "The source file's info for which the contents of the xml that was exported by clang-format."], [2, 2, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [2, 2, 2, 0, "xml_out", "A string containing the XML output."]], "cpp_linter.clang_tools.clang_format.run_clang_format": [[2, 2, 2, 0, "command", "The clang-format command to use (usually a resolved path)."], [2, 2, 2, 0, "file_obj", "Information about the FileObj."], [2, 2, 2, 0, "format_review", "A flag to enable/disable creating a diff suggestion for PR review comments."], [2, 2, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [2, 2, 2, 0, "style", "The clang-format style rules to adhere. Set this to 'file' to use the relative-most .clang-format configuration file."]], "cpp_linter.clang_tools.clang_tidy": [[3, 3, 1, 0, "TidyNotification", "Create a object that decodes info from the clang-tidy output's initial line that details a specific notification."], [3, 1, 1, 0, "parse_tidy_output", "Parse clang-tidy stdout."], [3, 1, 1, 0, "run_clang_tidy", "Run clang-tidy on a certain file."]], "cpp_linter.clang_tools.clang_tidy.TidyNotification.__init__": [[3, 2, 2, 0, "database", "The compilation database deserialized from JSON, only if --database argument points to a valid path containing a compile_commands.json file."], [3, 2, 2, 0, "notification_line", "The first line in the notification parsed into a tuple of str that represent the different components of the notification's details."]], "cpp_linter.clang_tools.clang_tidy.TidyNotification": [[3, 4, 1, 0, "applied_fixes", "A list of line numbers where a suggested fix was applied."], [3, 4, 1, 0, "cols", "The columns of the line that triggered the notification."], [3, 4, 1, 0, "diagnostic", "The columns of the line that triggered the notification."], [3, 5, 1, 0, "diagnostic_link", "Creates a markdown link to the diagnostic documentation."], [3, 4, 1, 0, "filename", "The source filename concerning the notification."], [3, 4, 1, 0, "fixit_lines", "A list of lines for the code-block in the notification."], [3, 4, 1, 0, "line", "The line number of the source file."], [3, 4, 1, 0, "rationale", "The rationale of the notification."], [3, 4, 1, 0, "severity", "The priority level of notification (warning/error)."]], "cpp_linter.clang_tools.clang_tidy.parse_tidy_output": [[3, 2, 2, 0, "database", "The compilation database deserialized from JSON, only if --database argument points to a valid path containing a compile_commands.json file."], [3, 2, 2, 0, "tidy_out", "The stdout from clang-tidy."]], "cpp_linter.clang_tools.clang_tidy.run_clang_tidy": [[3, 2, 2, 0, "checks", "The str of comma-separated regulate expressions that describe the desired clang-tidy checks to be enabled/configured."], [3, 2, 2, 0, "command", "The clang-tidy command to use (usually a resolved path)."], [3, 2, 2, 0, "database", "The path to the compilation database."], [3, 2, 2, 0, "db_json", "The compilation database deserialized from JSON, only if database parameter points to a valid path containing a compile_commands.json file."], [3, 2, 2, 0, "extra_args", "A list of extra arguments used by clang-tidy as compiler arguments."], [3, 2, 2, 0, "file_obj", "Information about the FileObj."], [3, 2, 2, 0, "lines_changed_only", "A flag that forces focus on only changes in the event's diff info."], [3, 2, 2, 0, "tidy_review", "A flag to enable/disable creating a diff suggestion for PR review comments."]], "cpp_linter.common_fs": [[4, 6, 1, 0, "CACHE_PATH", "A path to generated cache artifacts. (only used when verbosity is in debug mode)"], [4, 3, 1, 0, "FileObj", "A class to represent a single file being analyzed."], [4, 1, 1, 0, "get_line_cnt_from_cols", "Gets a line count and columns offset from a file's absolute offset."], [4, 1, 1, 0, "has_line_changes", "Does this file actually apply to condition specified by lines_changed_only?"], [4, 1, 1, 0, "is_file_in_list", "Determine if a file is specified in a list of paths and/or filenames."], [4, 1, 1, 0, "is_source_or_ignored", "Exclude undesired files (specified by user input --extensions). This filtering is applied to the FILES attribute."], [4, 1, 1, 0, "list_source_files", "Make a list of source files to be checked."]], "cpp_linter.common_fs.FileObj.__init__": [[4, 2, 2, 0, "additions", "A list of line numbers that have added changes in the diff. This value is used to populate the lines_added property."], [4, 2, 2, 0, "diff_chunks", "The ranges that define the beginning and ending line numbers for all hunks in the diff."], [4, 2, 2, 0, "name", "The file name. This should use Unix style path delimiters (/), even on Windows."]], "cpp_linter.common_fs.FileObj": [[4, 4, 1, 0, "additions", "A list of line numbers that contain added changes. This will be empty if not focusing on lines changed only."], [4, 4, 1, 0, "diff_chunks", "A list of line numbers that define the beginning and ending of hunks in the diff. This will be empty if not focusing on lines changed only."], [4, 7, 1, 0, "is_hunk_contained", "Does a given hunk start and end within a single diff hunk?"], [4, 7, 1, 0, "is_range_contained", "Does the given start and end line numbers fit within a single diff hunk?"], [4, 4, 1, 0, "lines_added", "A list of line numbers that define the beginning and ending of ranges that have added changes. This will be empty if not focusing on lines changed only."], [4, 4, 1, 0, "name", "The file name"], [4, 7, 1, 0, "range_of_changed_lines", "Assemble a list of lines changed."], [4, 7, 1, 0, "serialize", "For easy debugging, use this method to serialize the FileObj into a json compatible dict."]], "cpp_linter.common_fs.FileObj.range_of_changed_lines": [[4, 2, 2, 0, "get_ranges", "A flag to return a list of sequences representing range parameters. Defaults to False since this is only required when constructing clang-tidy or clang-format CLI arguments."], [4, 2, 2, 0, "lines_changed_only", "A flag to indicate the focus of certain lines."]], "cpp_linter.common_fs.get_line_cnt_from_cols": [[4, 2, 2, 0, "file_path", "Path to file."], [4, 2, 2, 0, "offset", "The byte offset to translate"]], "cpp_linter.common_fs.has_line_changes": [[4, 2, 2, 0, "additions", "The lines with additions in the diff for a single file."], [4, 2, 2, 0, "diff_chunks", "The ranges of lines in the diff for a single file."], [4, 2, 2, 0, "lines_changed_only", "A value that means:"]], "cpp_linter.common_fs.is_file_in_list": [[4, 2, 2, 0, "file_name", "The file's path & name being sought in the paths list."], [4, 2, 2, 0, "paths", "A list of specified paths to compare with. This list can contain a specified file, but the file's path must be included as part of the filename."], [4, 2, 2, 0, "prompt", "A debugging prompt to use when the path is found in the list."]], "cpp_linter.common_fs.is_source_or_ignored": [[4, 2, 2, 0, "ext_list", "A list of file extensions that are to be examined."], [4, 2, 2, 0, "file_name", "The name of file in question."], [4, 2, 2, 0, "ignored", "A list of paths to explicitly ignore."], [4, 2, 2, 0, "not_ignored", "A list of paths to explicitly not ignore."]], "cpp_linter.common_fs.list_source_files": [[4, 2, 2, 0, "extensions", "A list of file extensions that should by attended."], [4, 2, 2, 0, "ignored", "A list of paths to explicitly ignore."], [4, 2, 2, 0, "not_ignored", "A list of paths to explicitly not ignore."]], "cpp_linter.git": [[5, 1, 1, 0, "get_diff", "Retrieve the diff info about a specified commit."], [5, 1, 1, 0, "get_sha", "Uses git to fetch the full SHA hash of the current commit."], [6, 0, 0, 1, "git_str", ""], [5, 1, 1, 0, "parse_diff", "Parse a given diff into file objects."], [5, 1, 1, 0, "parse_patch", "Parse a diff's patch accordingly."]], "cpp_linter.git.get_diff": [[5, 2, 2, 0, "parents", "The number of parent commits related to the current commit."]], "cpp_linter.git.get_sha": [[5, 2, 2, 0, "parent", "This parameter's default value will fetch the SHA of the last commit. Set this parameter to the number of parent commits from the current tree's HEAD to get the desired commit's SHA hash instead."], [5, 2, 2, 0, "repo", "The object representing the git repository."]], "cpp_linter.git.git_str": [[6, 1, 1, 0, "parse_diff", "Parse a given diff into file objects."]], "cpp_linter.git.git_str.parse_diff": [[6, 2, 2, 0, "extensions", "A list of file extensions to focus on only."], [6, 2, 2, 0, "full_diff", "The complete diff for an event."], [6, 2, 2, 0, "ignored", "A list of paths or files to ignore."], [6, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."], [6, 2, 2, 0, "not_ignored", "A list of paths or files to explicitly not ignore."]], "cpp_linter.git.parse_diff": [[5, 2, 2, 0, "diff_obj", "The complete git diff object for an event."], [5, 2, 2, 0, "extensions", "A list of file extensions to focus on only."], [5, 2, 2, 0, "ignored", "A list of paths or files to ignore."], [5, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."], [5, 2, 2, 0, "not_ignored", "A list of paths or files to explicitly not ignore."]], "cpp_linter.git.parse_patch": [[5, 2, 2, 0, "patch", "The patch of hunks for 1 file."]], "cpp_linter.loggers": [[7, 1, 1, 0, "end_log_group", "End a collapsible group of log statements."], [7, 1, 1, 0, "log_response_msg", "Output the response buffer's message on a failed request."], [7, 6, 1, 0, "logger", "The logging.Logger object used for outputting data."], [7, 1, 1, 0, "start_log_group", "Begin a collapsible group of log statements."]], "cpp_linter.loggers.start_log_group": [[7, 2, 2, 0, "name", "The name of the collapsible group"]], "cpp_linter.rest_api": [[8, 3, 1, 0, "RestApiClient", "A helper function to streamline handling of HTTP requests' responses."], [9, 0, 0, 1, "github_api", ""]], "cpp_linter.rest_api.RestApiClient": [[8, 7, 1, 0, "api_request", "A helper function to streamline handling of HTTP requests' responses."], [8, 7, 1, 0, "get_list_of_changed_files", "Fetch a list of the event's changed files."], [8, 7, 1, 0, "make_comment", "Make an MarkDown comment from the given advice. Also returns a count of checks failed for each tool (clang-format and clang-tidy)"], [8, 7, 1, 0, "make_headers", "Create a dict for use in REST API headers."], [8, 7, 1, 0, "post_feedback", "Post action's results using REST API."], [8, 7, 1, 0, "set_exit_code", "Set the action's output values and shows them in the log output."]], "cpp_linter.rest_api.RestApiClient.api_request": [[8, 2, 2, 0, "data", "The HTTP request payload data."], [8, 2, 2, 0, "headers", "The HTTP request headers to use. This can be used to override the default headers used."], [8, 2, 2, 0, "method", "The HTTP request method. The default value None means \"GET\" if data is None else \"POST\""], [8, 2, 2, 0, "strict", "If this is set True, then an HTTPError will be raised when the HTTP request responds with a status code greater than or equal to 400."], [8, 2, 2, 0, "url", "The  HTTP request URL."]], "cpp_linter.rest_api.RestApiClient.get_list_of_changed_files": [[8, 2, 2, 0, "extensions", "A list of file extensions to focus on only."], [8, 2, 2, 0, "ignored", "A list of paths or files to ignore."], [8, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."], [8, 2, 2, 0, "not_ignored", "A list of paths or files to explicitly not ignore."]], "cpp_linter.rest_api.RestApiClient.make_comment": [[8, 2, 2, 0, "files", "A list of objects, each describing a file's information."], [8, 2, 2, 0, "format_advice", "A list of clang-format advice parallel to the list of files."], [8, 2, 2, 0, "tidy_advice", "A list of clang-tidy advice parallel to the list of files."]], "cpp_linter.rest_api.RestApiClient.make_headers": [[8, 2, 2, 0, "use_diff", "A flag to indicate that the returned format should be in diff syntax."]], "cpp_linter.rest_api.RestApiClient.post_feedback": [[8, 2, 2, 0, "file_annotations", "A flag that describes if file annotations should be posted. See --file-annotations."], [8, 2, 2, 0, "files", "A list of objects, each describing a file's information."], [8, 2, 2, 0, "format_advice", "A list of clang-format advice parallel to the list of files."], [8, 2, 2, 0, "format_review", "A flag to enable/disable creating a diff suggestion for PR review comments using clang-format."], [8, 2, 2, 0, "no_lgtm", "A flag to control if a \"Looks Good To Me\" comment should be posted. If this is False, then an outdated bot comment will still be deleted. See --no-lgtm."], [8, 2, 2, 0, "step_summary", "A flag that describes if a step summary should be posted. See --step-summary."], [8, 2, 2, 0, "style", "The style used for clang-format. See --style."], [8, 2, 2, 0, "thread_comments", "A flag that describes if how thread comments should be handled. See --thread-comments."], [8, 2, 2, 0, "tidy_advice", "A list of clang-tidy advice parallel to the list of files."], [8, 2, 2, 0, "tidy_review", "A flag to enable/disable creating a diff suggestion for PR review comments using clang-tidy."]], "cpp_linter.rest_api.RestApiClient.set_exit_code": [[8, 2, 2, 0, "checks_failed", "A int describing the total number of checks that failed."], [8, 2, 2, 0, "format_checks_failed", "A int describing the number of checks that failed only for clang-format."], [8, 2, 2, 0, "tidy_checks_failed", "A int describing the number of checks that failed only for clang-tidy."]], "cpp_linter.rest_api.github_api": [[9, 3, 1, 0, "GithubApiClient", "The base domain for the REST API"], [9, 1, 1, 0, "has_more_pages", "A helper function to parse a HTTP request's response headers to determine if the previous REST API call is paginated."]], "cpp_linter.rest_api.github_api.GithubApiClient": [[9, 7, 1, 0, "api_request", "A helper function to streamline handling of HTTP requests' responses."], [9, 4, 1, 0, "api_url", "The base domain for the REST API"], [9, 7, 1, 0, "create_review_comments", "Creates a batch of comments for a specific clang tool's PR review"], [9, 4, 1, 0, "debug_enabled", "A flag that describes if debug logs are enabled."], [9, 4, 1, 0, "event_name", "The triggering event type's name"], [9, 4, 1, 0, "event_payload", "The event payload delivered as the web hook for the workflow run."], [9, 7, 1, 0, "get_list_of_changed_files", "Fetch a list of the event's changed files."], [9, 7, 1, 0, "make_annotations", "Use github log commands to make annotations from clang-format and clang-tidy output."], [9, 7, 1, 0, "make_headers", "Create a dict for use in REST API headers."], [9, 7, 1, 0, "post_feedback", "Post action's results using REST API."], [9, 7, 1, 0, "remove_bot_comments", "Traverse the list of comments made by a specific user and remove all."], [9, 4, 1, 0, "repo", "The owner/repository name."], [9, 7, 1, 0, "set_exit_code", "Set the action's output values and shows them in the log output."], [9, 4, 1, 0, "sha", "The HEAD commit's SHA"], [9, 7, 1, 0, "update_comment", "Updates the comment for an existing comment or posts a new comment if update_only is False."], [9, 7, 1, 0, "verify_files_are_present", "Download the files if not present."]], "cpp_linter.rest_api.github_api.GithubApiClient.api_request": [[9, 2, 2, 0, "data", "The HTTP request payload data."], [9, 2, 2, 0, "headers", "The HTTP request headers to use. This can be used to override the default headers used."], [9, 2, 2, 0, "method", "The HTTP request method. The default value None means \"GET\" if data is None else \"POST\""], [9, 2, 2, 0, "strict", "If this is set True, then an HTTPError will be raised when the HTTP request responds with a status code greater than or equal to 400."], [9, 2, 2, 0, "url", "The  HTTP request URL."]], "cpp_linter.rest_api.github_api.GithubApiClient.get_list_of_changed_files": [[9, 2, 2, 0, "extensions", "A list of file extensions to focus on only."], [9, 2, 2, 0, "ignored", "A list of paths or files to ignore."], [9, 2, 2, 0, "lines_changed_only", "A value that dictates what file changes to focus on."], [9, 2, 2, 0, "not_ignored", "A list of paths or files to explicitly not ignore."]], "cpp_linter.rest_api.github_api.GithubApiClient.make_annotations": [[9, 2, 2, 0, "files", "A list of objects, each describing a file's information."], [9, 2, 2, 0, "format_advice", "A list of clang-format advice parallel to the list of files."], [9, 2, 2, 0, "style", "The chosen code style guidelines. The value 'file' is replaced with 'custom style'."], [9, 2, 2, 0, "tidy_advice", "A list of clang-tidy advice parallel to the list of files."]], "cpp_linter.rest_api.github_api.GithubApiClient.make_headers": [[9, 2, 2, 0, "use_diff", "A flag to indicate that the returned format should be in diff syntax."]], "cpp_linter.rest_api.github_api.GithubApiClient.post_feedback": [[9, 2, 2, 0, "file_annotations", "A flag that describes if file annotations should be posted. See --file-annotations."], [9, 2, 2, 0, "files", "A list of objects, each describing a file's information."], [9, 2, 2, 0, "format_advice", "A list of clang-format advice parallel to the list of files."], [9, 2, 2, 0, "format_review", "A flag to enable/disable creating a diff suggestion for PR review comments using clang-format."], [9, 2, 2, 0, "no_lgtm", "A flag to control if a \"Looks Good To Me\" comment should be posted. If this is False, then an outdated bot comment will still be deleted. See --no-lgtm."], [9, 2, 2, 0, "step_summary", "A flag that describes if a step summary should be posted. See --step-summary."], [9, 2, 2, 0, "style", "The style used for clang-format. See --style."], [9, 2, 2, 0, "thread_comments", "A flag that describes if how thread comments should be handled. See --thread-comments."], [9, 2, 2, 0, "tidy_advice", "A list of clang-tidy advice parallel to the list of files."], [9, 2, 2, 0, "tidy_review", "A flag to enable/disable creating a diff suggestion for PR review comments using clang-tidy."]], "cpp_linter.rest_api.github_api.GithubApiClient.remove_bot_comments": [[9, 2, 2, 0, "comments_url", "The URL used to fetch the comments."], [9, 2, 2, 0, "delete", "A flag describing if first applicable bot comment should be deleted or not."]], "cpp_linter.rest_api.github_api.GithubApiClient.set_exit_code": [[9, 2, 2, 0, "checks_failed", "A int describing the total number of checks that failed."], [9, 2, 2, 0, "format_checks_failed", "A int describing the number of checks that failed only for clang-format."], [9, 2, 2, 0, "tidy_checks_failed", "A int describing the number of checks that failed only for clang-tidy."]], "cpp_linter.rest_api.github_api.GithubApiClient.update_comment": [[9, 2, 2, 0, "comment", "The Comment to post."], [9, 2, 2, 0, "comments_url", "The URL used to fetch the comments."], [9, 2, 2, 0, "is_lgtm", "A flag the describes if the comment being posted is essentially a \"Looks Good To Me\" comment."], [9, 2, 2, 0, "no_lgtm", "A flag to control if a \"Looks Good To Me\" comment should be posted. If this is True, then an outdated bot comment will still be deleted."], [9, 2, 2, 0, "update_only", "A flag that describes if the outdated bot comment should only be updated (instead of replaced)."]], "cpp_linter.rest_api.github_api.GithubApiClient.verify_files_are_present": [[9, 2, 2, 0, "files", "A list of files to check for existence."]], "cpp_linter.rest_api.github_api.has_more_pages": [[9, 2, 2, 0, "response", "A HTTP request's response."]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:parameter", "3": "py:class", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:method", "8": "std:cmdoption"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "class", "Python class"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "method", "Python method"], "8": ["std", "cmdoption", "program option"]}, "titleterms": {"__init__": 0, "clang_tool": [1, 2, 3], "clang_format": 2, "clang_tidi": 3, "note": [3, 5, 11], "common_f": 4, "tip": [4, 14], "git": [5, 6], "git_str": 6, "logger": 7, "rest_api": [8, 9], "github_api": 9, "seealso": [9, 11, 14], "hint": [9, 14], "how": 10, "build": 10, "doc": 10, "command": 11, "line": 11, "interfac": 11, "option": 11, "import": 11, "c": 12, "lint": 12, "packag": 12, "usag": 12, "have": 12, "question": 12, "feedback": 12, "licens": 12, "token": 13, "permiss": [13, 14], "file": 13, "chang": 13, "thread": 13, "comment": 13, "pull": [13, 14], "request": [13, 14], "review": [13, 14], "caveat": 14, "bot": 14, "requir": 14, "auto": 14, "disabl": 14, "certain": 14, "event": 14, "type": 14, "post": 14, "new": 14, "each": 14, "run": 14, "probabl": 14, "non": 14, "exhaust": 14}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"__init__": [[0, "module-cpp_linter"]], "clang_tools": [[1, "module-cpp_linter.clang_tools"]], "clang_tools.clang_format": [[2, "module-cpp_linter.clang_tools.clang_format"]], "clang_tools.clang_tidy": [[3, "module-cpp_linter.clang_tools.clang_tidy"]], "Note": [[3, null], [5, null], [5, null], [11, null], [11, null], [11, null]], "common_fs": [[4, "module-cpp_linter.common_fs"]], "Tip": [[4, null], [4, null], [14, null]], "git": [[5, "module-cpp_linter.git"]], "git.git_str": [[6, "module-cpp_linter.git.git_str"]], "loggers": [[7, "module-cpp_linter.loggers"]], "rest_api": [[8, "module-cpp_linter.rest_api"]], "rest_api.github_api": [[9, "module-cpp_linter.rest_api.github_api"]], "Seealso": [[9, null], [11, null], [14, null], [14, null]], "Hint": [[9, null], [14, null]], "How to build the docs": [[10, "how-to-build-the-docs"]], "Command Line Interface Options": [[11, "command-line-interface-options"]], "Important": [[11, null]], "C/C++ Linting Package": [[12, "c-c-linting-package"]], "Usage": [[12, "usage"]], "Have question or feedback?": [[12, "have-question-or-feedback"]], "License": [[12, "license"]], "Token Permissions": [[13, "token-permissions"]], "File Changes": [[13, "file-changes"]], "Thread Comments": [[13, "thread-comments"]], "Pull Request Reviews": [[13, "pull-request-reviews"]], "Pull Request Review Caveats": [[14, "pull-request-review-caveats"]], "Bot Permissions required": [[14, "bot-permissions-required"]], "Auto-disabled for certain event types": [[14, "auto-disabled-for-certain-event-types"]], "Posts a new review on each run": [[14, "posts-a-new-review-on-each-run"]], "Probable non-exhaustive reviews": [[14, "probable-non-exhaustive-reviews"]]}, "indexentries": {"cpp_linter": [[0, "module-cpp_linter"]], "main() (in module cpp_linter)": [[0, "cpp_linter.main"]], "module": [[0, "module-cpp_linter"], [1, "module-cpp_linter.clang_tools"], [2, "module-cpp_linter.clang_tools.clang_format"], [3, "module-cpp_linter.clang_tools.clang_tidy"], [4, "module-cpp_linter.common_fs"], [5, "module-cpp_linter.git"], [6, "module-cpp_linter.git.git_str"], [7, "module-cpp_linter.loggers"], [8, "module-cpp_linter.rest_api"], [9, "module-cpp_linter.rest_api.github_api"]], "assemble_version_exec() (in module cpp_linter.clang_tools)": [[1, "cpp_linter.clang_tools.assemble_version_exec"]], "capture_clang_tools_output() (in module cpp_linter.clang_tools)": [[1, "cpp_linter.clang_tools.capture_clang_tools_output"]], "cpp_linter.clang_tools": [[1, "module-cpp_linter.clang_tools"]], "formatadvice (class in cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice"]], "formatreplacement (class in cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement"]], "formatreplacementline (class in cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacementLine"]], "cols (cpp_linter.clang_tools.clang_format.formatreplacement attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement.cols"]], "cpp_linter.clang_tools.clang_format": [[2, "module-cpp_linter.clang_tools.clang_format"]], "filename (cpp_linter.clang_tools.clang_format.formatadvice attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice.filename"]], "line (cpp_linter.clang_tools.clang_format.formatreplacementline attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacementLine.line"]], "null_len (cpp_linter.clang_tools.clang_format.formatreplacement attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement.null_len"]], "parse_format_replacements_xml() (in module cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.parse_format_replacements_xml"]], "patched (cpp_linter.clang_tools.clang_format.formatadvice attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice.patched"]], "replaced_lines (cpp_linter.clang_tools.clang_format.formatadvice attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatAdvice.replaced_lines"]], "replacements (cpp_linter.clang_tools.clang_format.formatreplacementline attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacementLine.replacements"]], "run_clang_format() (in module cpp_linter.clang_tools.clang_format)": [[2, "cpp_linter.clang_tools.clang_format.run_clang_format"]], "text (cpp_linter.clang_tools.clang_format.formatreplacement attribute)": [[2, "cpp_linter.clang_tools.clang_format.FormatReplacement.text"]], "tidynotification (class in cpp_linter.clang_tools.clang_tidy)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification"]], "applied_fixes (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.applied_fixes"]], "cols (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.cols"]], "cpp_linter.clang_tools.clang_tidy": [[3, "module-cpp_linter.clang_tools.clang_tidy"]], "diagnostic (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.diagnostic"]], "diagnostic_link (cpp_linter.clang_tools.clang_tidy.tidynotification property)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.diagnostic_link"]], "filename (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.filename"]], "fixit_lines (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.fixit_lines"]], "line (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.line"]], "parse_tidy_output() (in module cpp_linter.clang_tools.clang_tidy)": [[3, "cpp_linter.clang_tools.clang_tidy.parse_tidy_output"]], "rationale (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.rationale"]], "run_clang_tidy() (in module cpp_linter.clang_tools.clang_tidy)": [[3, "cpp_linter.clang_tools.clang_tidy.run_clang_tidy"]], "severity (cpp_linter.clang_tools.clang_tidy.tidynotification attribute)": [[3, "cpp_linter.clang_tools.clang_tidy.TidyNotification.severity"]], "cache_path (in module cpp_linter.common_fs)": [[4, "cpp_linter.common_fs.CACHE_PATH"]], "fileobj (class in cpp_linter.common_fs)": [[4, "cpp_linter.common_fs.FileObj"]], "additions (cpp_linter.common_fs.fileobj attribute)": [[4, "cpp_linter.common_fs.FileObj.additions"]], "cpp_linter.common_fs": [[4, "module-cpp_linter.common_fs"]], "diff_chunks (cpp_linter.common_fs.fileobj attribute)": [[4, "cpp_linter.common_fs.FileObj.diff_chunks"]], "get_line_cnt_from_cols() (in module cpp_linter.common_fs)": [[4, "cpp_linter.common_fs.get_line_cnt_from_cols"]], "has_line_changes() (in module cpp_linter.common_fs)": [[4, "cpp_linter.common_fs.has_line_changes"]], "is_file_in_list() (in module cpp_linter.common_fs)": [[4, "cpp_linter.common_fs.is_file_in_list"]], "is_hunk_contained() (cpp_linter.common_fs.fileobj method)": [[4, "cpp_linter.common_fs.FileObj.is_hunk_contained"]], "is_range_contained() (cpp_linter.common_fs.fileobj method)": [[4, "cpp_linter.common_fs.FileObj.is_range_contained"]], "is_source_or_ignored() (in module cpp_linter.common_fs)": [[4, "cpp_linter.common_fs.is_source_or_ignored"]], "lines_added (cpp_linter.common_fs.fileobj attribute)": [[4, "cpp_linter.common_fs.FileObj.lines_added"]], "list_source_files() (in module cpp_linter.common_fs)": [[4, "cpp_linter.common_fs.list_source_files"]], "name (cpp_linter.common_fs.fileobj attribute)": [[4, "cpp_linter.common_fs.FileObj.name"]], "range_of_changed_lines() (cpp_linter.common_fs.fileobj method)": [[4, "cpp_linter.common_fs.FileObj.range_of_changed_lines"]], "serialize() (cpp_linter.common_fs.fileobj method)": [[4, "cpp_linter.common_fs.FileObj.serialize"]], "cpp_linter.git": [[5, "module-cpp_linter.git"]], "get_diff() (in module cpp_linter.git)": [[5, "cpp_linter.git.get_diff"]], "get_sha() (in module cpp_linter.git)": [[5, "cpp_linter.git.get_sha"]], "parse_diff() (in module cpp_linter.git)": [[5, "cpp_linter.git.parse_diff"]], "parse_patch() (in module cpp_linter.git)": [[5, "cpp_linter.git.parse_patch"]], "cpp_linter.git.git_str": [[6, "module-cpp_linter.git.git_str"]], "parse_diff() (in module cpp_linter.git.git_str)": [[6, "cpp_linter.git.git_str.parse_diff"]], "cpp_linter.loggers": [[7, "module-cpp_linter.loggers"]], "end_log_group() (in module cpp_linter.loggers)": [[7, "cpp_linter.loggers.end_log_group"]], "log_response_msg() (in module cpp_linter.loggers)": [[7, "cpp_linter.loggers.log_response_msg"]], "logger (in module cpp_linter.loggers)": [[7, "cpp_linter.loggers.logger"]], "start_log_group() (in module cpp_linter.loggers)": [[7, "cpp_linter.loggers.start_log_group"]], "restapiclient (class in cpp_linter.rest_api)": [[8, "cpp_linter.rest_api.RestApiClient"]], "api_request() (cpp_linter.rest_api.restapiclient method)": [[8, "cpp_linter.rest_api.RestApiClient.api_request"]], "cpp_linter.rest_api": [[8, "module-cpp_linter.rest_api"]], "get_list_of_changed_files() (cpp_linter.rest_api.restapiclient method)": [[8, "cpp_linter.rest_api.RestApiClient.get_list_of_changed_files"]], "make_comment() (cpp_linter.rest_api.restapiclient static method)": [[8, "cpp_linter.rest_api.RestApiClient.make_comment"]], "make_headers() (cpp_linter.rest_api.restapiclient method)": [[8, "cpp_linter.rest_api.RestApiClient.make_headers"]], "post_feedback() (cpp_linter.rest_api.restapiclient method)": [[8, "cpp_linter.rest_api.RestApiClient.post_feedback"]], "set_exit_code() (cpp_linter.rest_api.restapiclient method)": [[8, "cpp_linter.rest_api.RestApiClient.set_exit_code"]], "githubapiclient (class in cpp_linter.rest_api.github_api)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient"]], "api_request() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.api_request"]], "api_url (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.api_url"]], "cpp_linter.rest_api.github_api": [[9, "module-cpp_linter.rest_api.github_api"]], "create_review_comments() (cpp_linter.rest_api.github_api.githubapiclient static method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.create_review_comments"]], "debug_enabled (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.debug_enabled"]], "event_name (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.event_name"]], "event_payload (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.event_payload"]], "get_list_of_changed_files() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.get_list_of_changed_files"]], "has_more_pages() (in module cpp_linter.rest_api.github_api)": [[9, "cpp_linter.rest_api.github_api.has_more_pages"]], "make_annotations() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.make_annotations"]], "make_headers() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.make_headers"]], "post_feedback() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.post_feedback"]], "remove_bot_comments() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.remove_bot_comments"]], "repo (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.repo"]], "set_exit_code() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.set_exit_code"]], "sha (cpp_linter.rest_api.github_api.githubapiclient attribute)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.sha"]], "update_comment() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.update_comment"]], "verify_files_are_present() (cpp_linter.rest_api.github_api.githubapiclient method)": [[9, "cpp_linter.rest_api.github_api.GithubApiClient.verify_files_are_present"]], "--database": [[11, "cmdoption-p"]], "--extensions": [[11, "cmdoption-e"]], "--extra-arg": [[11, "cmdoption-x"]], "--file-annotations": [[11, "cmdoption-a"]], "--files-changed-only": [[11, "cmdoption-f"]], "--format-review": [[11, "cmdoption-m"]], "--ignore": [[11, "cmdoption-i"]], "--jobs": [[11, "cmdoption-j"]], "--lines-changed-only": [[11, "cmdoption-l"]], "--no-lgtm": [[11, "cmdoption-g"]], "--repo-root": [[11, "cmdoption-r"]], "--step-summary": [[11, "cmdoption-w"]], "--style": [[11, "cmdoption-s"]], "--thread-comments": [[11, "cmdoption-t"]], "--tidy-checks": [[11, "cmdoption-c"]], "--tidy-review": [[11, "cmdoption-d"]], "--verbosity": [[11, "cmdoption-v"]], "--version": [[11, "cmdoption-V"]], "-v": [[11, "cmdoption-V"], [11, "cmdoption-v"]], "-a": [[11, "cmdoption-a"]], "-c": [[11, "cmdoption-c"]], "-d": [[11, "cmdoption-d"]], "-e": [[11, "cmdoption-e"]], "-f": [[11, "cmdoption-f"]], "-g": [[11, "cmdoption-g"]], "-i": [[11, "cmdoption-i"]], "-j": [[11, "cmdoption-j"]], "-l": [[11, "cmdoption-l"]], "-m": [[11, "cmdoption-m"]], "-p": [[11, "cmdoption-p"]], "-r": [[11, "cmdoption-r"]], "-s": [[11, "cmdoption-s"]], "-t": [[11, "cmdoption-t"]], "-w": [[11, "cmdoption-w"]], "-x": [[11, "cmdoption-x"]], "command line option": [[11, "cmdoption-V"], [11, "cmdoption-a"], [11, "cmdoption-c"], [11, "cmdoption-d"], [11, "cmdoption-e"], [11, "cmdoption-f"], [11, "cmdoption-g"], [11, "cmdoption-i"], [11, "cmdoption-j"], [11, "cmdoption-l"], [11, "cmdoption-m"], [11, "cmdoption-p"], [11, "cmdoption-r"], [11, "cmdoption-s"], [11, "cmdoption-t"], [11, "cmdoption-v"], [11, "cmdoption-w"], [11, "cmdoption-x"]]}, "docurls": ["API-Reference/cpp_linter.html", "API-Reference/cpp_linter.clang_tools.html", "API-Reference/cpp_linter.clang_tools.clang_format.html", "API-Reference/cpp_linter.clang_tools.clang_tidy.html", "API-Reference/cpp_linter.common_fs.html", "API-Reference/cpp_linter.git.html", "API-Reference/cpp_linter.git.git_str.html", "API-Reference/cpp_linter.loggers.html", "API-Reference/cpp_linter.rest_api.html", "API-Reference/cpp_linter.rest_api.github_api.html", "building_docs.html", "cli_args.html", "index.html", "permissions.html", "pr_review_caveats.html"]})